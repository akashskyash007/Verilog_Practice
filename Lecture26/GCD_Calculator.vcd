$date
	Fri Oct  7 12:54:39 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TEST_BENCH $end
$var wire 1 ! sel_in $end
$var wire 1 " sel2 $end
$var wire 1 # sel1 $end
$var wire 1 $ lt $end
$var wire 1 % gt $end
$var wire 1 & eq $end
$var wire 1 ' done $end
$var wire 1 ( LdB $end
$var wire 1 ) LdA $end
$var reg 1 * clk $end
$var reg 16 + data_in [15:0] $end
$var reg 1 , start $end
$scope module CNT $end
$var wire 1 * clk $end
$var wire 1 , start $end
$var wire 1 $ lt $end
$var wire 1 % gt $end
$var wire 1 & eq $end
$var reg 1 ) LdA $end
$var reg 1 ( LdB $end
$var reg 1 ' done $end
$var reg 3 - next_state [2:0] $end
$var reg 3 . present_state [2:0] $end
$var reg 1 # sel1 $end
$var reg 1 " sel2 $end
$var reg 1 ! sel_in $end
$upscope $end
$scope module DP $end
$var wire 1 ) LdA $end
$var wire 1 ( LdB $end
$var wire 1 * clk $end
$var wire 16 / data_in [15:0] $end
$var wire 1 # sel1 $end
$var wire 1 " sel2 $end
$var wire 1 ! sel_in $end
$var wire 16 0 sub_out [15:0] $end
$var wire 16 1 sub_in2 [15:0] $end
$var wire 16 2 sub_in1 [15:0] $end
$var wire 1 $ lt $end
$var wire 1 % gt $end
$var wire 1 & eq $end
$var wire 16 3 Bus [15:0] $end
$var wire 16 4 Bout [15:0] $end
$var wire 16 5 Aout [15:0] $end
$scope module A $end
$var wire 1 * clk $end
$var wire 1 ) load $end
$var wire 16 6 in [15:0] $end
$var reg 16 7 out [15:0] $end
$upscope $end
$scope module B $end
$var wire 1 * clk $end
$var wire 1 ( load $end
$var wire 16 8 in [15:0] $end
$var reg 16 9 out [15:0] $end
$upscope $end
$scope module COMP $end
$var wire 16 : in1 [15:0] $end
$var wire 16 ; in2 [15:0] $end
$var wire 1 $ lt $end
$var wire 1 % gt $end
$var wire 1 & eq $end
$upscope $end
$scope module MUX1 $end
$var wire 16 < in1 [15:0] $end
$var wire 16 = in2 [15:0] $end
$var wire 1 # sel $end
$var reg 16 > out [15:0] $end
$upscope $end
$scope module MUX2 $end
$var wire 16 ? in1 [15:0] $end
$var wire 16 @ in2 [15:0] $end
$var wire 1 " sel $end
$var reg 16 A out [15:0] $end
$upscope $end
$scope module MUX_IN $end
$var wire 16 B in1 [15:0] $end
$var wire 1 ! sel $end
$var wire 16 C in2 [15:0] $end
$var reg 16 D out [15:0] $end
$upscope $end
$scope module SUB $end
$var wire 16 E in1 [15:0] $end
$var wire 16 F in2 [15:0] $end
$var reg 16 G out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
x,
bx +
0*
x)
x(
x'
x&
x%
x$
x#
x"
x!
$end
#3
0'
0(
0)
0!
0"
0#
b0 -
1,
#5
b0 .
1*
#7
1)
b1 -
#10
0*
#12
b100111 3
b100111 6
b100111 8
b100111 D
b100111 +
b100111 /
b100111 B
#15
b0 0
b0 C
b0 G
b100111 2
b100111 >
b100111 E
b100111 1
b100111 A
b100111 F
b1 .
b100111 5
b100111 7
b100111 :
b100111 <
b100111 ?
1*
#17
1(
0)
b10 -
#20
0*
#22
b10001111 3
b10001111 6
b10001111 8
b10001111 D
b10001111 +
b10001111 /
b10001111 B
#25
1$
0%
0&
b10001111 4
b10001111 9
b10001111 ;
b10001111 =
b10001111 @
b10 .
1*
#27
b1101000 0
b1101000 C
b1101000 G
b1101000 3
b1101000 6
b1101000 8
b1101000 D
b10001111 2
b10001111 >
b10001111 E
1!
1#
b11 -
#30
0*
#35
b1000001 3
b1000001 6
b1000001 8
b1000001 D
b1000001 0
b1000001 C
b1000001 G
b1101000 2
b1101000 >
b1101000 E
b11 .
b1101000 4
b1101000 9
b1101000 ;
b1101000 =
b1101000 @
1*
#40
0*
#45
b11010 3
b11010 6
b11010 8
b11010 D
b11010 0
b11010 C
b11010 G
b1000001 2
b1000001 >
b1000001 E
b1000001 4
b1000001 9
b1000001 ;
b1000001 =
b1000001 @
1*
#50
0*
#55
b1111111111110011 3
b1111111111110011 6
b1111111111110011 8
b1111111111110011 D
b1111111111110011 0
b1111111111110011 C
b1111111111110011 G
b11010 2
b11010 >
b11010 E
0$
1%
b11010 4
b11010 9
b11010 ;
b11010 =
b11010 @
1*
#57
b1101 3
b1101 6
b1101 8
b1101 D
b1101 0
b1101 C
b1101 G
b11010 1
b11010 A
b11010 F
b100111 2
b100111 >
b100111 E
0(
1)
1"
0#
b100 -
#60
0*
#65
b1111111111110011 3
b1111111111110011 6
b1111111111110011 8
b1111111111110011 D
b1111111111110011 0
b1111111111110011 C
b1111111111110011 G
b1101 2
b1101 >
b1101 E
1$
0%
b1101 5
b1101 7
b1101 :
b1101 <
b1101 ?
b100 .
1*
#67
b1101 3
b1101 6
b1101 8
b1101 D
b1101 0
b1101 C
b1101 G
b1101 1
b1101 A
b1101 F
b11010 2
b11010 >
b11010 E
1(
0)
0"
1#
b11 -
#70
0*
#75
b0 3
b0 6
b0 8
b0 D
b0 0
b0 C
b0 G
b1101 2
b1101 >
b1101 E
b11 .
0$
1&
b1101 4
b1101 9
b1101 ;
b1101 =
b1101 @
1*
#77
0(
1'
b101 -
#80
0*
#85
b101 .
1*
#90
0*
#95
1*
#100
0*
#105
1*
#110
0*
#115
1*
#120
0*
#125
1*
#130
0*
#135
1*
#140
0*
#145
1*
#150
0*
#155
1*
#160
0*
#165
1*
#170
0*
#175
1*
#180
0*
#185
1*
#190
0*
#195
1*
#200
0*
#205
1*
#210
0*
#215
1*
#220
0*
#225
1*
#230
0*
#235
1*
#240
0*
#245
1*
#250
0*
#255
1*
#260
0*
#265
1*
#270
0*
#275
1*
#280
0*
#285
1*
#290
0*
#295
1*
#300
0*
#305
1*
#310
0*
#315
1*
#320
0*
#325
1*
#330
0*
#335
1*
#340
0*
#345
1*
#350
0*
#355
1*
#360
0*
#365
1*
#370
0*
#375
1*
#380
0*
#385
1*
#390
0*
#395
1*
#400
0*
#405
1*
#410
0*
#415
1*
#420
0*
#425
1*
#430
0*
#435
1*
#440
0*
#445
1*
#450
0*
#455
1*
#460
0*
#465
1*
#470
0*
#475
1*
#480
0*
#485
1*
#490
0*
#495
1*
#500
0*
#505
1*
#510
0*
#515
1*
#520
0*
#525
1*
#530
0*
#535
1*
#540
0*
#545
1*
#550
0*
#555
1*
#560
0*
#565
1*
#570
0*
#575
1*
#580
0*
#585
1*
#590
0*
#595
1*
#600
0*
#605
1*
#610
0*
#615
1*
#620
0*
#625
1*
#630
0*
#635
1*
#640
0*
#645
1*
#650
0*
#655
1*
#660
0*
#665
1*
#670
0*
#675
1*
#680
0*
#685
1*
#690
0*
#695
1*
#700
0*
#705
1*
#710
0*
#715
1*
#720
0*
#725
1*
#730
0*
#735
1*
#740
0*
#745
1*
#750
0*
#755
1*
#760
0*
#765
1*
#770
0*
#775
1*
#780
0*
#785
1*
#790
0*
#795
1*
#800
0*
#805
1*
#810
0*
#815
1*
#820
0*
#825
1*
#830
0*
#835
1*
#840
0*
#845
1*
#850
0*
#855
1*
#860
0*
#865
1*
#870
0*
#875
1*
#880
0*
#885
1*
#890
0*
#895
1*
#900
0*
#905
1*
#910
0*
#915
1*
#920
0*
#925
1*
#930
0*
#935
1*
#940
0*
#945
1*
#950
0*
#955
1*
#960
0*
#965
1*
#970
0*
#975
1*
#980
0*
#985
1*
#990
0*
#995
1*
#1000
0*
#1003
